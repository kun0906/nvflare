v0.1.2: Add collect_and_assemble_aggregator and assembler

v0.1.1: Add collect_and_assemble_aggregator

v0.1.0:Save global_model in each round

1. Save global_model in each round in scatter_and_gather.py
    # save result to disk
    model_file = os.path.join(fl_ctx.get_prop("__app_root__"), 'models',
                              f'global_weights_{self._current_round}.pkl')
    model_file = os.path.abspath(model_file)
    model_dir = os.path.dirname(model_file)
    if not os.path.exists(model_dir):
        os.makedirs(model_dir, exist_ok=True)
    self.log_info(fl_ctx, f'model_file: {model_file}')
    torch.save(self._global_weights, model_file)

2. Add load_model.py to load the saved global_model.
    # Load the model with weights_only=True
    model = torch.load(f'{model_dir}/global_weights_0.pkl', weights_only=False)


v0.0.9:Add confusion matrix and AUC

1. Add confusion matrix and AUC to learner_with_tb.py
2. Change POC directory from /tmp to $WORK
3. Change all data directory to ~/data, then use it directly in code, i.e., os.path.expanduser(data_path)



v0.0.8:Add more GPUs and store local models in each iteration

1. Modify learner_with_tb.py to use more GPUs
2. Update gen_sites
3. Store local models in each iteration



v0.0.7-3:Update download.sh

v0.0.7:Update NVFLare to 2.5.0


v0.0.6:Add tensorboard for job:"10clients-2classes"

1. Add tensorboard for job:"10clients-2classes"


v0.0.5:Add attack data with fixed values: 255

1. Add attack data: cifar10_attack_data
2. Modify config/config_fed_server.json: "min_clients" : 10
3. Add json formatter: format_json.py


v0.0.4:Generated sites automatically

1. Add gen_sites.py
2. Update cifar10_data.py for airplane vs. rest
3. Update jobs and scripts
